/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateNestArgs } from "./CreateNestArgs";
import { UpdateNestArgs } from "./UpdateNestArgs";
import { DeleteNestArgs } from "./DeleteNestArgs";
import { NestFindManyArgs } from "./NestFindManyArgs";
import { NestFindUniqueArgs } from "./NestFindUniqueArgs";
import { Nest } from "./Nest";
import { BillFindManyArgs } from "../../bill/base/BillFindManyArgs";
import { Bill } from "../../bill/base/Bill";
import { RentFindManyArgs } from "../../rent/base/RentFindManyArgs";
import { Rent } from "../../rent/base/Rent";
import { TenantFindManyArgs } from "../../tenant/base/TenantFindManyArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { Property } from "../../property/base/Property";
import { NestService } from "../nest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Nest)
export class NestResolverBase {
  constructor(
    protected readonly service: NestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "read",
    possession: "any",
  })
  async _nestsMeta(
    @graphql.Args() args: NestFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Nest])
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "read",
    possession: "any",
  })
  async nests(@graphql.Args() args: NestFindManyArgs): Promise<Nest[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Nest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "read",
    possession: "own",
  })
  async nest(@graphql.Args() args: NestFindUniqueArgs): Promise<Nest | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Nest)
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "create",
    possession: "any",
  })
  async createNest(@graphql.Args() args: CreateNestArgs): Promise<Nest> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        propertyId: {
          connect: args.data.propertyId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Nest)
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  async updateNest(@graphql.Args() args: UpdateNestArgs): Promise<Nest | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          propertyId: {
            connect: args.data.propertyId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Nest)
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "delete",
    possession: "any",
  })
  async deleteNest(@graphql.Args() args: DeleteNestArgs): Promise<Nest | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Bill], { name: "bills" })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  async resolveFieldBills(
    @graphql.Parent() parent: Nest,
    @graphql.Args() args: BillFindManyArgs
  ): Promise<Bill[]> {
    const results = await this.service.findBills(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Rent], { name: "rents" })
  @nestAccessControl.UseRoles({
    resource: "Rent",
    action: "read",
    possession: "any",
  })
  async resolveFieldRents(
    @graphql.Parent() parent: Nest,
    @graphql.Args() args: RentFindManyArgs
  ): Promise<Rent[]> {
    const results = await this.service.findRents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Tenant], { name: "tenants" })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async resolveFieldTenants(
    @graphql.Parent() parent: Nest,
    @graphql.Args() args: TenantFindManyArgs
  ): Promise<Tenant[]> {
    const results = await this.service.findTenants(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Property, {
    nullable: true,
    name: "propertyId",
  })
  @nestAccessControl.UseRoles({
    resource: "Property",
    action: "read",
    possession: "any",
  })
  async resolveFieldPropertyId(
    @graphql.Parent() parent: Nest
  ): Promise<Property | null> {
    const result = await this.service.getPropertyId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
