/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { NestService } from "../nest.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { NestCreateInput } from "./NestCreateInput";
import { NestWhereInput } from "./NestWhereInput";
import { NestWhereUniqueInput } from "./NestWhereUniqueInput";
import { NestFindManyArgs } from "./NestFindManyArgs";
import { NestUpdateInput } from "./NestUpdateInput";
import { Nest } from "./Nest";
import { BillFindManyArgs } from "../../bill/base/BillFindManyArgs";
import { Bill } from "../../bill/base/Bill";
import { BillWhereUniqueInput } from "../../bill/base/BillWhereUniqueInput";
import { RentFindManyArgs } from "../../rent/base/RentFindManyArgs";
import { Rent } from "../../rent/base/Rent";
import { RentWhereUniqueInput } from "../../rent/base/RentWhereUniqueInput";
import { TenantFindManyArgs } from "../../tenant/base/TenantFindManyArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class NestControllerBase {
  constructor(
    protected readonly service: NestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Nest })
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: NestCreateInput): Promise<Nest> {
    return await this.service.create({
      data: {
        ...data,

        propertyId: {
          connect: data.propertyId,
        },
      },
      select: {
        id: true,
        isOccupied: true,
        isUnit: true,
        name: true,

        propertyId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Nest] })
  @ApiNestedQuery(NestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<Nest[]> {
    const args = plainToClass(NestFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        id: true,
        isOccupied: true,
        isUnit: true,
        name: true,

        propertyId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Nest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: NestWhereUniqueInput
  ): Promise<Nest | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        id: true,
        isOccupied: true,
        isUnit: true,
        name: true,

        propertyId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Nest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: NestWhereUniqueInput,
    @common.Body() data: NestUpdateInput
  ): Promise<Nest | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          propertyId: {
            connect: data.propertyId,
          },
        },
        select: {
          id: true,
          isOccupied: true,
          isUnit: true,
          name: true,

          propertyId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Nest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: NestWhereUniqueInput
  ): Promise<Nest | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          id: true,
          isOccupied: true,
          isUnit: true,
          name: true,

          propertyId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bills")
  @ApiNestedQuery(BillFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  async findManyBills(
    @common.Req() request: Request,
    @common.Param() params: NestWhereUniqueInput
  ): Promise<Bill[]> {
    const query = plainToClass(BillFindManyArgs, request.query);
    const results = await this.service.findBills(params.id, {
      ...query,
      select: {
        amount: true,
        category: true,
        date: true,
        description: true,
        id: true,
        name: true,

        nestId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bills")
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  async connectBills(
    @common.Param() params: NestWhereUniqueInput,
    @common.Body() body: BillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bills: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bills")
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  async updateBills(
    @common.Param() params: NestWhereUniqueInput,
    @common.Body() body: BillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bills: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bills")
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  async disconnectBills(
    @common.Param() params: NestWhereUniqueInput,
    @common.Body() body: BillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bills: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/rents")
  @ApiNestedQuery(RentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Rent",
    action: "read",
    possession: "any",
  })
  async findManyRents(
    @common.Req() request: Request,
    @common.Param() params: NestWhereUniqueInput
  ): Promise<Rent[]> {
    const query = plainToClass(RentFindManyArgs, request.query);
    const results = await this.service.findRents(params.id, {
      ...query,
      select: {
        amount: true,
        date: true,
        id: true,

        nestId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rents")
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  async connectRents(
    @common.Param() params: NestWhereUniqueInput,
    @common.Body() body: RentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rents: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rents")
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  async updateRents(
    @common.Param() params: NestWhereUniqueInput,
    @common.Body() body: RentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rents: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rents")
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  async disconnectRents(
    @common.Param() params: NestWhereUniqueInput,
    @common.Body() body: RentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rents: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/tenants")
  @ApiNestedQuery(TenantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async findManyTenants(
    @common.Req() request: Request,
    @common.Param() params: NestWhereUniqueInput
  ): Promise<Tenant[]> {
    const query = plainToClass(TenantFindManyArgs, request.query);
    const results = await this.service.findTenants(params.id, {
      ...query,
      select: {
        email: true,
        firstname: true,
        id: true,
        lastname: true,

        nestId: {
          select: {
            id: true,
          },
        },

        phone: true,
        sin: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tenants")
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  async connectTenants(
    @common.Param() params: NestWhereUniqueInput,
    @common.Body() body: TenantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tenants: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tenants")
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  async updateTenants(
    @common.Param() params: NestWhereUniqueInput,
    @common.Body() body: TenantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tenants: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tenants")
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "update",
    possession: "any",
  })
  async disconnectTenants(
    @common.Param() params: NestWhereUniqueInput,
    @common.Body() body: TenantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tenants: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
