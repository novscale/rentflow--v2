/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBillArgs } from "./CreateBillArgs";
import { UpdateBillArgs } from "./UpdateBillArgs";
import { DeleteBillArgs } from "./DeleteBillArgs";
import { BillFindManyArgs } from "./BillFindManyArgs";
import { BillFindUniqueArgs } from "./BillFindUniqueArgs";
import { Bill } from "./Bill";
import { Nest } from "../../nest/base/Nest";
import { BillService } from "../bill.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Bill)
export class BillResolverBase {
  constructor(
    protected readonly service: BillService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  async _billsMeta(
    @graphql.Args() args: BillFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Bill])
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  async bills(@graphql.Args() args: BillFindManyArgs): Promise<Bill[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Bill, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "own",
  })
  async bill(@graphql.Args() args: BillFindUniqueArgs): Promise<Bill | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bill)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "create",
    possession: "any",
  })
  async createBill(@graphql.Args() args: CreateBillArgs): Promise<Bill> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        nestId: {
          connect: args.data.nestId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bill)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "update",
    possession: "any",
  })
  async updateBill(@graphql.Args() args: UpdateBillArgs): Promise<Bill | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          nestId: {
            connect: args.data.nestId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bill)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "delete",
    possession: "any",
  })
  async deleteBill(@graphql.Args() args: DeleteBillArgs): Promise<Bill | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Nest, {
    nullable: true,
    name: "nestId",
  })
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "read",
    possession: "any",
  })
  async resolveFieldNestId(
    @graphql.Parent() parent: Bill
  ): Promise<Nest | null> {
    const result = await this.service.getNestId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
