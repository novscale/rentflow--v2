/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRentArgs } from "./CreateRentArgs";
import { UpdateRentArgs } from "./UpdateRentArgs";
import { DeleteRentArgs } from "./DeleteRentArgs";
import { RentFindManyArgs } from "./RentFindManyArgs";
import { RentFindUniqueArgs } from "./RentFindUniqueArgs";
import { Rent } from "./Rent";
import { Nest } from "../../nest/base/Nest";
import { Tenant } from "../../tenant/base/Tenant";
import { RentService } from "../rent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Rent)
export class RentResolverBase {
  constructor(
    protected readonly service: RentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Rent",
    action: "read",
    possession: "any",
  })
  async _rentsMeta(
    @graphql.Args() args: RentFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Rent])
  @nestAccessControl.UseRoles({
    resource: "Rent",
    action: "read",
    possession: "any",
  })
  async rents(@graphql.Args() args: RentFindManyArgs): Promise<Rent[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Rent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Rent",
    action: "read",
    possession: "own",
  })
  async rent(@graphql.Args() args: RentFindUniqueArgs): Promise<Rent | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Rent)
  @nestAccessControl.UseRoles({
    resource: "Rent",
    action: "create",
    possession: "any",
  })
  async createRent(@graphql.Args() args: CreateRentArgs): Promise<Rent> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        nestId: {
          connect: args.data.nestId,
        },

        tenantId: {
          connect: args.data.tenantId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Rent)
  @nestAccessControl.UseRoles({
    resource: "Rent",
    action: "update",
    possession: "any",
  })
  async updateRent(@graphql.Args() args: UpdateRentArgs): Promise<Rent | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          nestId: {
            connect: args.data.nestId,
          },

          tenantId: {
            connect: args.data.tenantId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rent)
  @nestAccessControl.UseRoles({
    resource: "Rent",
    action: "delete",
    possession: "any",
  })
  async deleteRent(@graphql.Args() args: DeleteRentArgs): Promise<Rent | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Nest, {
    nullable: true,
    name: "nestId",
  })
  @nestAccessControl.UseRoles({
    resource: "Nest",
    action: "read",
    possession: "any",
  })
  async resolveFieldNestId(
    @graphql.Parent() parent: Rent
  ): Promise<Nest | null> {
    const result = await this.service.getNestId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async resolveFieldTenantId(
    @graphql.Parent() parent: Rent
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
