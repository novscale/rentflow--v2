# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Bill {
  amount: Float!
  category: EnumBillCategory
  date: DateTime!
  description: String
  id: String!
  name: String!
  nestId: Nest
  updatedAt: DateTime!
}

input BillCreateInput {
  amount: Float!
  category: EnumBillCategory!
  date: DateTime!
  description: String
  name: String!
  nestId: NestWhereUniqueInput!
}

input BillCreateNestedManyWithoutNestsInput {
  connect: [BillWhereUniqueInput!]
}

input BillListRelationFilter {
  every: BillWhereInput
  none: BillWhereInput
  some: BillWhereInput
}

input BillOrderByInput {
  amount: SortOrder
  category: SortOrder
  date: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  nestIdId: SortOrder
  updatedAt: SortOrder
}

input BillUpdateInput {
  amount: Float
  category: EnumBillCategory
  date: DateTime
  description: String
  name: String
  nestId: NestWhereUniqueInput
}

input BillUpdateManyWithoutNestsInput {
  connect: [BillWhereUniqueInput!]
  disconnect: [BillWhereUniqueInput!]
  set: [BillWhereUniqueInput!]
}

input BillWhereInput {
  amount: FloatFilter
  category: EnumBillCategory
  date: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  nestId: NestWhereUniqueInput
}

input BillWhereUniqueInput {
  id: String!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum EnumBillCategory {
  Electricity
  Gas
  Insurance
  Ltb
  Maintenance
  Mortgage
  Other
  PropertyTax
  Repairs
  Water
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createBill(data: BillCreateInput!): Bill!
  createNest(data: NestCreateInput!): Nest!
  createProperty(data: PropertyCreateInput!): Property!
  createRent(data: RentCreateInput!): Rent!
  createTenant(data: TenantCreateInput!): Tenant!
  createUser(data: UserCreateInput!): User!
  deleteBill(where: BillWhereUniqueInput!): Bill!
  deleteNest(where: NestWhereUniqueInput!): Nest!
  deleteProperty(where: PropertyWhereUniqueInput!): Property!
  deleteRent(where: RentWhereUniqueInput!): Rent!
  deleteTenant(where: TenantWhereUniqueInput!): Tenant!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateBill(data: BillUpdateInput!, where: BillWhereUniqueInput!): Bill!
  updateNest(data: NestUpdateInput!, where: NestWhereUniqueInput!): Nest!
  updateProperty(data: PropertyUpdateInput!, where: PropertyWhereUniqueInput!): Property!
  updateRent(data: RentUpdateInput!, where: RentWhereUniqueInput!): Rent!
  updateTenant(data: TenantUpdateInput!, where: TenantWhereUniqueInput!): Tenant!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Nest {
  bills(orderBy: [BillOrderByInput!], skip: Float, take: Float, where: BillWhereInput): [Bill!]!
  id: String!
  isOccupied: Boolean!
  isUnit: Boolean!
  name: String!
  propertyId: Property
  rents(orderBy: [RentOrderByInput!], skip: Float, take: Float, where: RentWhereInput): [Rent!]!
  tenants(orderBy: [TenantOrderByInput!], skip: Float, take: Float, where: TenantWhereInput): [Tenant!]!
  updatedAt: DateTime!
}

input NestCreateInput {
  bills: BillCreateNestedManyWithoutNestsInput
  isOccupied: Boolean!
  isUnit: Boolean!
  name: String!
  propertyId: PropertyWhereUniqueInput!
  rents: RentCreateNestedManyWithoutNestsInput
  tenants: TenantCreateNestedManyWithoutNestsInput
}

input NestCreateNestedManyWithoutPropertiesInput {
  connect: [NestWhereUniqueInput!]
}

input NestListRelationFilter {
  every: NestWhereInput
  none: NestWhereInput
  some: NestWhereInput
}

input NestOrderByInput {
  id: SortOrder
  isOccupied: SortOrder
  isUnit: SortOrder
  name: SortOrder
  propertyIdId: SortOrder
  updatedAt: SortOrder
}

input NestUpdateInput {
  bills: BillUpdateManyWithoutNestsInput
  isOccupied: Boolean
  isUnit: Boolean
  name: String
  propertyId: PropertyWhereUniqueInput
  rents: RentUpdateManyWithoutNestsInput
  tenants: TenantUpdateManyWithoutNestsInput
}

input NestUpdateManyWithoutPropertiesInput {
  connect: [NestWhereUniqueInput!]
  disconnect: [NestWhereUniqueInput!]
  set: [NestWhereUniqueInput!]
}

input NestWhereInput {
  bills: BillListRelationFilter
  id: StringFilter
  isOccupied: BooleanFilter
  isUnit: BooleanFilter
  name: StringFilter
  propertyId: PropertyWhereUniqueInput
  rents: RentListRelationFilter
  tenants: TenantListRelationFilter
}

input NestWhereUniqueInput {
  id: String!
}

type Property {
  city: String!
  country: String!
  id: String!
  nests(orderBy: [NestOrderByInput!], skip: Float, take: Float, where: NestWhereInput): [Nest!]!
  postalCode: String!
  streetName: String!
  streetNumber: String!
  updatedAt: DateTime!
}

input PropertyCreateInput {
  city: String!
  country: String!
  nests: NestCreateNestedManyWithoutPropertiesInput
  postalCode: String!
  streetName: String!
  streetNumber: String!
}

input PropertyOrderByInput {
  city: SortOrder
  country: SortOrder
  id: SortOrder
  postalCode: SortOrder
  streetName: SortOrder
  streetNumber: SortOrder
  updatedAt: SortOrder
}

input PropertyUpdateInput {
  city: String
  country: String
  nests: NestUpdateManyWithoutPropertiesInput
  postalCode: String
  streetName: String
  streetNumber: String
}

input PropertyWhereInput {
  city: StringFilter
  country: StringFilter
  id: StringFilter
  nests: NestListRelationFilter
  postalCode: StringFilter
  streetName: StringFilter
  streetNumber: StringFilter
}

input PropertyWhereUniqueInput {
  id: String!
}

type Query {
  _billsMeta(orderBy: [BillOrderByInput!], skip: Float, take: Float, where: BillWhereInput): MetaQueryPayload!
  _nestsMeta(orderBy: [NestOrderByInput!], skip: Float, take: Float, where: NestWhereInput): MetaQueryPayload!
  _propertiesMeta(orderBy: [PropertyOrderByInput!], skip: Float, take: Float, where: PropertyWhereInput): MetaQueryPayload!
  _rentsMeta(orderBy: [RentOrderByInput!], skip: Float, take: Float, where: RentWhereInput): MetaQueryPayload!
  _tenantsMeta(orderBy: [TenantOrderByInput!], skip: Float, take: Float, where: TenantWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  bill(where: BillWhereUniqueInput!): Bill
  bills(orderBy: [BillOrderByInput!], skip: Float, take: Float, where: BillWhereInput): [Bill!]!
  nest(where: NestWhereUniqueInput!): Nest
  nests(orderBy: [NestOrderByInput!], skip: Float, take: Float, where: NestWhereInput): [Nest!]!
  properties(orderBy: [PropertyOrderByInput!], skip: Float, take: Float, where: PropertyWhereInput): [Property!]!
  property(where: PropertyWhereUniqueInput!): Property
  rent(where: RentWhereUniqueInput!): Rent
  rents(orderBy: [RentOrderByInput!], skip: Float, take: Float, where: RentWhereInput): [Rent!]!
  tenant(where: TenantWhereUniqueInput!): Tenant
  tenants(orderBy: [TenantOrderByInput!], skip: Float, take: Float, where: TenantWhereInput): [Tenant!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

type Rent {
  amount: Float!
  date: DateTime!
  id: String!
  nestId: Nest
  tenantId: Tenant
  updatedAt: DateTime!
}

input RentCreateInput {
  amount: Float!
  date: DateTime!
  nestId: NestWhereUniqueInput!
  tenantId: TenantWhereUniqueInput!
}

input RentCreateNestedManyWithoutNestsInput {
  connect: [RentWhereUniqueInput!]
}

input RentCreateNestedManyWithoutTenantsInput {
  connect: [RentWhereUniqueInput!]
}

input RentListRelationFilter {
  every: RentWhereInput
  none: RentWhereInput
  some: RentWhereInput
}

input RentOrderByInput {
  amount: SortOrder
  date: SortOrder
  id: SortOrder
  nestIdId: SortOrder
  tenantIdId: SortOrder
  updatedAt: SortOrder
}

input RentUpdateInput {
  amount: Float
  date: DateTime
  nestId: NestWhereUniqueInput
  tenantId: TenantWhereUniqueInput
}

input RentUpdateManyWithoutNestsInput {
  connect: [RentWhereUniqueInput!]
  disconnect: [RentWhereUniqueInput!]
  set: [RentWhereUniqueInput!]
}

input RentUpdateManyWithoutTenantsInput {
  connect: [RentWhereUniqueInput!]
  disconnect: [RentWhereUniqueInput!]
  set: [RentWhereUniqueInput!]
}

input RentWhereInput {
  amount: FloatFilter
  date: DateTimeFilter
  id: StringFilter
  nestId: NestWhereUniqueInput
  tenantId: TenantWhereUniqueInput
}

input RentWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Tenant {
  email: String
  firstname: String!
  id: String!
  lastname: String!
  nestId: Nest
  phone: String
  rents(orderBy: [RentOrderByInput!], skip: Float, take: Float, where: RentWhereInput): [Rent!]!
  sin: String!
  updatedAt: DateTime!
}

input TenantCreateInput {
  email: String
  firstname: String!
  lastname: String!
  nestId: NestWhereUniqueInput!
  phone: String
  rents: RentCreateNestedManyWithoutTenantsInput
  sin: String!
}

input TenantCreateNestedManyWithoutNestsInput {
  connect: [TenantWhereUniqueInput!]
}

input TenantListRelationFilter {
  every: TenantWhereInput
  none: TenantWhereInput
  some: TenantWhereInput
}

input TenantOrderByInput {
  email: SortOrder
  firstname: SortOrder
  id: SortOrder
  lastname: SortOrder
  nestIdId: SortOrder
  phone: SortOrder
  sin: SortOrder
  updatedAt: SortOrder
}

input TenantUpdateInput {
  email: String
  firstname: String
  lastname: String
  nestId: NestWhereUniqueInput
  phone: String
  rents: RentUpdateManyWithoutTenantsInput
  sin: String
}

input TenantUpdateManyWithoutNestsInput {
  connect: [TenantWhereUniqueInput!]
  disconnect: [TenantWhereUniqueInput!]
  set: [TenantWhereUniqueInput!]
}

input TenantWhereInput {
  email: StringNullableFilter
  firstname: StringFilter
  id: StringFilter
  lastname: StringFilter
  nestId: NestWhereUniqueInput
  phone: StringNullableFilter
  rents: RentListRelationFilter
  sin: StringFilter
}

input TenantWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
